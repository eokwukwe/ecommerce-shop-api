{
  "swagger": "2.0",
  "info": {
    "description": "This is a ecommerce API",
    "version": "1.0.0",
    "title": "Ecommerce API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "okwukwe.ewurum@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "fcode-ecommerce.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "Customers",
      "description": "Everything about Customers"
    },
    {
      "name": "Departments",
      "description": "Everything about department"
    },
    {
      "name": "Categories",
      "description": "Everything about category"
    },
    {
      "name": "Attributes",
      "description": "Everything about attribute"
    }
  ],
  "schemes": ["https", "http"],
  "paths": {
    "/customers": {
      "get": {
        "tags": ["Customers"],
        "summary": "Get a Customer",
        "description": "Get a Customer profile data",
        "operationId": "getCustomerProfile",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "USER_KEY",
            "in": "header",
            "description": "user authentication token",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "new user object",
            "schema": {
              "$ref": "#/components/schemas/updateResponse"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      },
      "post": {
        "tags": ["Customers"],
        "summary": "Register a new Customer",
        "description": "Register a new Customer",
        "operationId": "create",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The user object to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newCustomer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "new user object with auth token",
            "schema": {
              "$ref": "#/components/schemas/userResponse"
            }
          },
          "400": {
            "description": "The email already exists",
            "schema": {
              "$ref": "#/components/schemas/userError"
            }
          }
        }
      }
    },
    "/customers/login": {
      "post": {
        "tags": ["Customers"],
        "summary": "Login a registered Customer",
        "description": "Login a registered Customer",
        "operationId": "login",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The user object to register",
            "required": true,
            "schema": {
              "$ref": "#/definitions/customer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "sign in user object",
            "schema": {
              "$ref": "#/components/schemas/userResponse"
            }
          },
          "400": {
            "description": "Email or Password is invalid",
            "schema": {
              "$ref": "#/components/schemas/loginError"
            }
          }
        }
      }
    },
    "/customers/facebook": {
      "post": {
        "tags": ["Customers"],
        "summary": "Login a customer via facebook",
        "description": "Login a via facebook",
        "operationId": "facebookLogin",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "facebook access_token",
            "required": true,
            "schema": {
              "$ref": "#/definitions/facebook"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "sign in user object",
            "schema": {
              "$ref": "#/components/schemas/userResponse"
            }
          },
          "400": {
            "description": "access_token is required",
            "schema": {
              "$ref": "#/components/schemas/facebookError"
            }
          }
        }
      }
    },
    "/customers/profile": {
      "put": {
        "tags": ["Customers"],
        "summary": "update customer profile data",
        "description": "update customer profile data such as name, email, day_phone, eve_phone and mob_phone",
        "operationId": "updateCustomerProfile",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "USER_KEY",
            "in": "header",
            "description": "user authentication token",
            "required": true,
            "type": "string"
          },
          {
            "name": "user object",
            "in": "body",
            "description": "user object to update",
            "required": true,
            "schema": {
              "$ref": "#/definitions/profileData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "new user object",
            "schema": {
              "$ref": "#/components/schemas/updateResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/inputError"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      }
    },
    "/customers/creditCard": {
      "put": {
        "tags": ["Customers"],
        "summary": "Update customer credit card",
        "description": "Update custumer credit card",
        "operationId": "updateCreditCard",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "USER_KEY",
            "in": "header",
            "type": "string",
            "description": "user Authentication key"
          },
          {
            "name": "credit_card",
            "in": "body",
            "description": "user credit card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/creditCard"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user record",
            "schema": {
              "$ref": "#/components/schemas/updateResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/inputError"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      }
    },
    "/customers/address": {
      "put": {
        "tags": ["Customers"],
        "summary": "Update customer Address",
        "description": "Update customer profile data such as address_1, address_2, city, region, postal_code, country and shipping_region_id",
        "operationId": "updateCustomerAddress",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "USER_KEY",
            "in": "header",
            "type": "string",
            "description": "user Authentication key"
          },
          {
            "name": "address",
            "in": "body",
            "description": "user credit card",
            "required": true,
            "schema": {
              "$ref": "#/definitions/address"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "updated user record",
            "schema": {
              "$ref": "#/components/schemas/updateResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/inputError"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      }
    },
    "/departments": {
      "post": {
        "tags": ["Departments"],
        "summary": "Create a new department",
        "description": "Create a new department",
        "operationId": "create",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The department object to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newDepartment"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "new department create",
            "schema": {
              "$ref": "#/components/schemas/departmentResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/inputError"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      },
      "get": {
        "tags": ["Departments"],
        "summary": "Get all departments",
        "description": "Get all departments",
        "operationId": "getAllDepartments",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An array of departments",
            "schema": {
              "$ref": "#/components/schemas/allDepartmentsResponse"
            }
          }
        }
      }
    },
    "/departments/{department_id}": {
      "get": {
        "tags": ["Departments"],
        "summary": "Get a department by ID",
        "description": "Get one department by the department ID",
        "operationId": "getOneDepartment",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An object of department",
            "schema": {
              "$ref": "#/components/schemas/departmentResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/invalidIdResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "tags": ["Categories"],
        "summary": "Create a new category",
        "description": "Create a new category",
        "operationId": "create",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The category object to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newCategory"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "new category create",
            "schema": {
              "$ref": "#/components/schemas/categoryResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/inputError"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      },
      "get": {
        "tags": ["Categories"],
        "summary": "Get all categories",
        "description": "Get all categories",
        "operationId": "getAllCategories",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An array of categories",
            "schema": {
              "$ref": "#/components/schemas/allCategoriesResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    },
    "/categories/{category_id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get a category by ID",
        "description": "Get one category by the category ID",
        "operationId": "getCategoryById",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An object of category",
            "schema": {
              "$ref": "#/components/schemas/categoryResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/invalidIdResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    },
    "/categories/inProduct/{category_id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get categories of a Product",
        "description": "Get categories of a Product",
        "operationId": "getProductCategories",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An array of categories",
            "schema": {
              "$ref": "#/components/schemas/productCategoriesResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/invalidIdResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    },
    "/categories/inDepartment/{category_id}": {
      "get": {
        "tags": ["Categories"],
        "summary": "Get categories of a Department",
        "description": "Get categories of a Department",
        "operationId": "getDepartmentCategories",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An array of categories",
            "schema": {
              "$ref": "#/components/schemas/allCategoriesResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/invalidIdResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    },
    "/attributes": {
      "post": {
        "tags": ["Attributes"],
        "summary": "Create a new attribute",
        "description": "Create a new attribute",
        "operationId": "create",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The attribute object to create",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newAttribute"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "new category create",
            "schema": {
              "$ref": "#/components/schemas/attributeResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/inputError"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      },
      "get": {
        "tags": ["Attributes"],
        "summary": "Get all attributes",
        "description": "Get all attributes",
        "operationId": "getAllAttributes",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An array of attributes",
            "schema": {
              "$ref": "#/components/schemas/allAttributesResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    },
    "/attributes/{attribute_id}/values": {
      "post": {
        "tags": ["Attributes"],
        "summary": "Add a new value to an existing attribute",
        "description": "Add a new attribute value to an existing attribute",
        "operationId": "addAttributeValue",
        "consumes": ["application/json", "application/x-www-form-urlencoded"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "The attribute value object to add",
            "required": true,
            "schema": {
              "$ref": "#/definitions/newAttributeValue"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "success message",
            "schema": {
              "$ref": "#/components/schemas/attributeValueResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/inputError"
            }
          },
          "401": {
            "description": "unauthorized",
            "schema": {
              "$ref": "#/components/schemas/authError"
            }
          }
        }
      },
      "get": {
        "tags": ["Attributes"],
        "summary": "Return a list of Attribute Values",
        "description": "Return a list of Attribute Values",
        "operationId": "getAttributeValues",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "Return a list of Attribute Values",
            "schema": {
              "$ref": "#/components/schemas/allAttributeValuesResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    },
    "/attributes/{attribute_id}": {
      "get": {
        "tags": ["Attributes"],
        "summary": "Get a single attribute by the attribute ID",
        "description": "Get a single attribute by the attribute ID",
        "operationId": "getSingleAttribute",
        "produces": ["application/json"],
        "responses": {
          "200": {
            "description": "An object of atrribute",
            "schema": {
              "$ref": "#/components/schemas/attributeResponse"
            }
          },
          "400": {
            "description": "bad request",
            "schema": {
              "$ref": "#/components/schemas/invalidIdResponse"
            }
          },
          "404": {
            "description": "not found",
            "schema": {
              "$ref": "#/components/schemas/notFoundResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "newCustomer": {
      "type": "object",
      "required": ["name", "email", "password"],
      "properties": {
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "john@doe.com"
        },
        "password": {
          "type": "string",
          "example": "johndoe"
        }
      }
    },
    "profileData": {
      "type": "object",
      "required": ["name", "email"],
      "properties": {
        "name": {
          "type": "string",
          "example": "John Doe"
        },
        "email": {
          "type": "string",
          "example": "john@doe.com"
        },
        "day_phone": {
          "type": "string",
          "example": "+236585488455588"
        },
        "mob_phone": {
          "type": "string",
          "example": "+236585488455588"
        },
        "eve_phone": {
          "type": "string",
          "example": "+236585488455588"
        }
      }
    },
    "customer": {
      "type": "object",
      "required": ["email", "password"],
      "properties": {
        "email": {
          "type": "string",
          "example": "john@doe.com"
        },
        "password": {
          "type": "string",
          "example": "johndoe"
        }
      }
    },
    "facebook": {
      "type": "object",
      "required": ["access_token"],
      "properties": {
        "access_token": {
          "type": "string"
        }
      }
    },
    "creditCard": {
      "type": "object",
      "required": ["credit_card"],
      "properties": {
        "credit_card": {
          "type": "string"
        }
      }
    },
    "address": {
      "type": "object",
      "required": ["address_1", "shipping_region_id", "city", "postal_code", "region", "country"],
      "properties": {
        "address_1": {
          "type": "string"
        },
        "address_2": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "shipping_region_id": {
          "type": "integer"
        },
        "postal_code": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "newDepartment": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "example": "new department"
        },
        "description": {
          "type": "string",
          "example": "new description"
        }
      }
    },
    "newCategory": {
      "type": "object",
      "required": ["name", "department_id"],
      "properties": {
        "name": {
          "type": "string",
          "example": "new category"
        },
        "description": {
          "type": "string",
          "example": "new category"
        },
        "department_id": {
          "type": "integer",
          "example": 1
        }
      }
    },
    "newAttribute": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "name": {
          "type": "string",
          "example": "Width"
        }
      }
    },
    "newAttributeValue": {
      "type": "object",
      "required": ["value"],
      "properties": {
        "value": {
          "type": "string",
          "example": "Wide"
        }
      }
    }
  },
  "components": {
    "schemas": {
      "userResponse": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "object",
            "properties": {
              "schema": {
                "type": "object",
                "properties": {
                  "customer_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "name": {
                    "type": "string",
                    "example": "Lannucci"
                  },
                  "email": {
                    "type": "string",
                    "example": "lannucci@hotmail.com"
                  },
                  "address_1": {
                    "type": "string",
                    "example": ""
                  },
                  "address_2": {
                    "type": "string",
                    "example": ""
                  },
                  "city": {
                    "type": "string",
                    "example": ""
                  },
                  "region": {
                    "type": "string",
                    "example": ""
                  },
                  "postal_code": {
                    "type": "string",
                    "example": ""
                  },
                  "country": {
                    "type": "string",
                    "example": ""
                  },
                  "shipping_region_id": {
                    "type": "integer",
                    "example": 1
                  },
                  "day_phone": {
                    "type": "string",
                    "example": ""
                  },
                  "eve_phone": {
                    "type": "string",
                    "example": ""
                  },
                  "mob_phone": {
                    "type": "string",
                    "example": ""
                  },
                  "credit_card": {
                    "type": "string",
                    "example": "XXXXXXXXXXXXXXX025"
                  }
                }
              },
              "accessToken": {
                "type": "string",
                "example": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiY3VzdG9tZXIiLCJpYXQiOjE1NTA0MjQ0OTgsImV4cCI6MTU1MDUxMDg5OH0.aEFrNUPRWuRWx0IOEL-_A4J4Ti39iXEHAScm6GI61RR"
              },
              "expires_in": {
                "type": "string",
                "example": "24h"
              }
            }
          }
        }
      },
      "updateResponse": {
        "type": "object",
        "properties": {
          "customer_id": {
            "type": "integer",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Lannucci"
          },
          "email": {
            "type": "string",
            "example": "lannucci@hotmail.com"
          },
          "address_1": {
            "type": "string",
            "example": "12 old rode"
          },
          "address_2": {
            "type": "string",
            "example": ""
          },
          "city": {
            "type": "string",
            "example": "city"
          },
          "region": {
            "type": "string",
            "example": "region"
          },
          "postal_code": {
            "type": "string",
            "example": "212121"
          },
          "country": {
            "type": "string",
            "example": "country"
          },
          "shipping_region_id": {
            "type": "integer",
            "example": 1
          },
          "day_phone": {
            "type": "string",
            "example": "+36225225225"
          },
          "eve_phone": {
            "type": "string",
            "example": "+3653653658"
          },
          "mob_phone": {
            "type": "string",
            "example": "+125242154111"
          },
          "credit_card": {
            "type": "string",
            "example": "XXXXXXXXXXXXXXX025"
          }
        }
      },
      "userError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "USR_04"
          },
          "message": {
            "type": "string",
            "example": "The email already exists"
          },
          "field": {
            "type": "string",
            "example": "email"
          },
          "status": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "loginError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "USR_01"
          },
          "message": {
            "type": "string",
            "example": "Email or Password is invalid."
          },
          "field": {
            "type": "string",
            "example": "email/password"
          },
          "status": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "facebookError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "USR_01"
          },
          "message": {
            "type": "string",
            "example": "access_token is not allowed to be empty"
          },
          "field": {
            "type": "string",
            "example": "access_token"
          },
          "status": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "inputError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "USR_03"
          },
          "message": {
            "type": "string",
            "example": "This field is not allowed to be empty"
          },
          "field": {
            "type": "string",
            "example": "example"
          },
          "status": {
            "type": "integer",
            "example": 400
          }
        }
      },
      "authError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "AUT_02"
          },
          "message": {
            "type": "string",
            "example": "The apikey is invalid."
          },
          "field": {
            "type": "string",
            "example": "API_KEY"
          },
          "status": {
            "type": "integer",
            "example": 401
          }
        }
      },
      "departmentResponse": {
        "type": "object",
        "properties": {
          "department_id": {
            "type": "interger",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "new department"
          },
          "description": {
            "type": "string",
            "example": "new description"
          }
        }
      },
      "allDepartmentsResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/departmentResponse"
        }
      },
      "categoryResponse": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "interger",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "new category"
          },
          "description": {
            "type": "string",
            "example": "The French have always had an eye for beauty. One look at the T-shirts below and you'll see that same appreciation has been applied abundantly to their postage stamps."
          },
          "department_id": {
            "type": "interger",
            "example": 1
          }
        }
      },
      "productCategories": {
        "type": "object",
        "properties": {
          "category_id": {
            "type": "interger",
            "example": 1
          },
          "department_id": {
            "type": "interger",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "new category"
          }
        }
      },
      "allCategoriesResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/categoryResponse"
        }
      },
      "productCategoriesResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/productCategories"
        }
      },
      "attributeResponse": {
        "type": "object",
        "properties": {
          "attribute_id": {
            "type": "interger",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Width"
          }
        }
      },
      "attributeValueResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "interger",
            "example": 201
          },
          "message": {
            "type": "string",
            "example": "Attribute value added successfully"
          }
        }
      },
      "attributeValuesResponse": {
        "type": "object",
        "properties": {
          "attribute_value_id": {
            "type": "interger",
            "example": 1
          },
          "values": {
            "type": "string",
            "example": "XXL"
          }
        }
      },
      "allAttributesResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/attributeResponse"
        }
      },
      "allAttributeValuesResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/attributeValuesResponse"
        }
      },
      "notFoundResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "USR_03"
          },
          "message": {
            "type": "string",
            "example": "Does not exist example with ID 5"
          },
          "status": {
            "type": "integer",
            "example": 404
          }
        }
      },
      "invalidIdResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "example": "USR_09"
          },
          "message": {
            "type": "string",
            "example": "The ID is not a number"
          },
          "status": {
            "type": "integer",
            "example": 400
          }
        }
      }
    }
  }
}
